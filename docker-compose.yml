services:
  # notification-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   container_name: notification-service
  #   env_file: ".env"
  #   ports:
  #     - "${NOTIFICATION_SERVICE_PORT}:8000"
  #   healthcheck:
  #     test: [ "CMD", "curl", "http://0.0.0.0:${NOTIFICATION_SERVICE_PORT}/" ]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 3
  #   networks:
  #     - notification-service-network

  # order-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   container_name: order-service
  #   env_file: ".env"
  #   ports:
  #     - "${ORDER_SERVICE_PORT}:8000"
  #   healthcheck:
  #     test: [ "CMD", "curl", "http://0.0.0.0:${ORDER_SERVICE_PORT}/" ]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 3
  #   networks:
  #     - order-service-network

  # payment-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   container_name: payment-service
  #   env_file: ".env"
  #   ports:
  #     - "${PAYMENT_SERVICE_PORT}:8000"
  #   healthcheck:
  #     test: [ "CMD", "curl", "http://0.0.0.0:${PAYMENT_SERVICE_PORT}/" ]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 3
  #   networks:
  #     - payment-service-network

  # product-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   container_name: product-service
  #   env_file: ".env"
  #   ports:
  #     - "${PRODUCT_SERVICE_PORT}:8000"
  #   healthcheck:
  #     test: [ "CMD", "curl", "http://0.0.0.0:${PRODUCT_SERVICE_PORT}/" ]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 3
  #   networks:
  #     - product-service-network

  # user-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   container_name: user-service
  #   env_file: ".env"
  #   ports:
  #     - "${USER_SERVICE_PORT}:8000"
  #   healthcheck:
  #     test: [ "CMD", "curl", "http://0.0.0.0:${USER_SERVICE_PORT}/" ]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 3
  #   networks:
  #     - user-service-network

  product-db:
    image: postgres:17
    container_name: product-db
    env_file: ".env"
    restart: unless-stopped
    ports:
      - "${PRODUCT_DB_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - product-db-volume:/var/lib/postgresql/data
    networks:
      - product-db-network

  payment-db:
    image: postgres:17
    container_name: payment-db
    env_file: ".env"
    restart: unless-stopped
    ports:
      - "${PAYMENT_DB_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - payment-db-volume:/var/lib/postgresql/data
    networks:
      - payment-db-network

  user-db:
    image: postgres:17
    container_name: user-db
    env_file: ".env"
    restart: unless-stopped
    ports:
      - "${USER_DB_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - user-db-volume:/var/lib/postgresql/data
    networks:
      - user-db-network

  order-db:
    image: mongo:8
    container_name: order-db
    env_file: ".env"
    restart: unless-stopped
    ports:
      - "${ORDER_DB_PORT}:27017"
    volumes:
      - order-db-volume:/data/db
    networks:
      - order-db-network

volumes:
  product-db-volume:
  payment-db-volume:
  user-db-volume:
  order-db-volume:
    driver: local

networks:
  notification-service-network:
  order-service-network:
  payment-service-network:
  product-service-network:
  user-service-network:
  product-db-network:
  payment-db-network:
  user-db-network:
  order-db-network:
    driver: bridge
